PID=$$
LOCK_FILE="/var/run/process-${PID}.pid"
LOG_FILE=/tmp/webui.log
LOG_SIZE_LIMIT=50000

curl_timeout=100

echo_c() {
	# 31 red, 32 green, 33 yellow, 34 blue, 35 magenta, 36 cyan, 37 white, 38 grey
	local t
	[ -z "$HASERLVER" ] && t="\e[1;$1m$2\e[0m" || t="$2"
	echo -e "$t"
}

log() {
	# poor man's logrotate
	if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt $LOG_SIZE_LIMIT ]; then
		# redundant, but calling log() from within log() is wrong!
		echo "$(date +"%F %T") [${PID}:${plugin}] Rotate log file" >>"$LOG_FILE"
		mv "$LOG_FILE" "${LOG_FILE}.1"
		echo "$(date +"%F %T") [${PID}:${plugin}] Log file rotated." >>"$LOG_FILE"
	fi
	echo "$(date +"%F %T") [${PID}:${plugin}] ${1}" >>"$LOG_FILE"
}

log_and_run() {
	log "$1" 34
	run "$1"
}

quit_clean() {
	if [ -f "$LOCK_FILE" ]; then
		log "Remove lock file ${LOCK_FILE}."
		rm "$LOCK_FILE"
	fi
	log "Exit [$1]."
	exit "$1"
}

run() {
	local r
	r=$(eval "$1" >>"$LOG_FILE" 2>&1)
	echo "RESULT: ${r}"
}

singleton() {
	log "Check lock file ${LOCK_FILE}."
	if [ -f "$LOCK_FILE" ] && ps | grep "^\s*\b$(cat "$LOCK_FILE")\b" >/dev/null; then
		log "Another instance running with PID $(cat "$LOCK_FILE")."
		exit 1
	fi
	printf "%d\n" $PID >"$LOCK_FILE"
	log "Create lock file ${LOCK_FILE}."
}
